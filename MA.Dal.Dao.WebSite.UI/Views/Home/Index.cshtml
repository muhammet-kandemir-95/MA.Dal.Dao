@section BreadCrumb {
    <li class="breadcrumb-item">
        <a href="#">Dashboard</a>
    </li>
    <li class="breadcrumb-item active">MA.Dal & MA.Dao</li>
}

@section Styles {

}

@section Scripts {

}


<div class="card mb-3">
    <div class="card-header">
        <i class="fa fa-database"></i>
        MA.Dal ( MA Data Access Layer )
    </div>
    <div class="card-body">
        <!--MA.Dal Description-->
        <h4>Data Access Layer About</h4>
        &nbsp;&nbsp;A data access layer (DAL) in computer software, is a layer of a computer program which provides simplified access to data stored in persistent storage of some kind, such as an entity-relational database. This acronym is prevalently used in Microsoft environments.

        For example, the DAL might return a reference to an object (in terms of object-oriented programming) complete with its attributes instead of a row of fields from a database table. This allows the client (or user) modules to be created with a higher level of abstraction. This kind of model could be implemented by creating a class of data access methods that directly reference a corresponding set of database stored procedures. Another implementation could potentially retrieve or write records to or from a file system. The DAL hides this complexity of the underlying data store from the external world.

        For example, instead of using commands such as insert, delete, and update to access a specific table in a database, a class and a few stored procedures could be created in the database. The procedures would be called from a method inside the class, which would return an object containing the requested values. Or, the insert, delete and update commands could be executed within simple functions like registeruser or loginuser stored within the data access layer.

        Also, business logic methods from an application can be mapped to the Data Access Layer. So, for example, instead of making a query into a database to fetch all users from several tables the application can call a single method from a DAL which abstracts those database calls.

        Applications using a data access layer can be either database server dependent or independent. If the data access layer supports multiple database types, the application becomes able to use whatever databases the DAL can talk to. In either circumstance, having a data access layer provides a centralized location for all calls into the database, and thus makes it easier to port the application to other database systems (assuming that 100% of the database interaction is done in the DAL for a given application).

        Object-Relational Mapping tools provide data layers in this fashion, following the active record model. The ORM/active-record model is popular with web frameworks.
        <br />
        <a href="https://en.wikipedia.org/wiki/Data_access_layer" target="_blank" style="font-size:14px;">Source Wikipedia</a>
        <br />
        <br />
        <i><b>MA.Dal Examples</b></i>
        <ul>
            <li>
                <a href="/MADalExamples/ConnectionOpenOrClose">Connection Example</a>
            </li>
            <li>
                <a href="/MADalExamples/CommandExecuteNonQuery">Command Example</a>
            </li>
            <li>
                <a href="/MADalExamples/CommandExecuteReader">DataReader Example</a>
            </li>
            <li>
                <a href="/MADalExamples/DataAdapterFill">DataAdapter Example</a>
            </li>
        </ul>
    </div>
</div>

<div class="card">
    <div class="card-header">
        <i class="fa fa-th"></i>
        MA.Dao ( MA Data Access Object )
    </div>
    <div class="card-body">
        <!--MA.Dao Description-->
        <h4>Data Access Object About</h4>
        &nbsp;&nbsp;This article is about the software design pattern. For the Microsoft library, see Jet Data Access Objects.
        In computer software, a data access object (DAO) is an object that provides an abstract interface to some type of database or other persistence mechanism. By mapping application calls to the persistence layer, the DAO provides some specific data operations without exposing details of the database. This isolation supports the Single responsibility principle. It separates what data access the application needs, in terms of domain-specific objects and data types (the public interface of the DAO), from how these needs can be satisfied with a specific DBMS, database schema, etc. (the implementation of the DAO).

        Although this design pattern is equally applicable to most programming languages, most types of software with persistence needs, and most types of databases, it is traditionally associated with Java EE applications and with relational databases (accessed via the JDBC API because of its origin in Sun Microsystems' best practice guidelines[1] "Core J2EE Patterns" for that platform).
        <br />
        <a href="https://en.wikipedia.org/wiki/Data_access_object" target="_blank" style="font-size:14px;">Source Wikipedia</a>
        <br />
        <br />
        <span style="
    float:left;width:calc(100%);box-sizing:border-box;background-color:gainsboro;padding-left:10px;padding-right:10px;border-radius:3px;margin-bottom:10px;font-size:14px;padding-top:5px;padding-bottom:5px;font-weight: bold;">
            Learn MA.Dao Extension "<a href="/MADaoVisualStudioExtension/HowToUse" target="_blank">How To Use</a>" for MA.Dao!
        </span>
        <br />
        <i><b>MA.Dao Examples</b></i>
        <br />
        <ul>
            <li>
                <a href="/MADaoExamples/LinqSelect">Linq Select</a>
            </li>
            <li>
                <a href="/MADaoExamples/LinqWhere">Linq Where</a>
            </li>
        </ul>
    </div>
</div>